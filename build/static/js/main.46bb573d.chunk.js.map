{"version":3,"sources":["components/LoginForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/MessageForm.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MyMessage","message","attachments","length","src","file","alt","style","float","console","log","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","MessageForm","props","setValue","chatId","creds","event","trim","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","display","files","SendOutlined","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46bb573d.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport axios from 'axios';\nconst LoginForm = () => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const authObject = { 'Project-ID': \"1bf81ce9-62ca-4532-a837-de087b3b1926\", \"User-Name\": username, 'User-Secret': password}\n\n        try {\n            await axios.get('https://api.chatengine.io/chats', { headers: authObject });\n\n            localStorage.setItem('username', username);\n            localStorage.setItem('password', password); \n\n            window.location.reload();\n        } catch (error) {\n            setError('Looks like your credentials did not work!')\n        }\n\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <div className=\"form\">\n                <h1 className=\"title\">Chat Application</h1>\n                <form onSubmit={handleSubmit}>\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required/>\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required/>\n                    <div align=\"center\">\n                        <button type=\"submit\" className=\"button\">\n                            <span>Start Chatting</span>\n                        </button>\n                    </div>\n                    <h2 className=\"error\">{error}</h2>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginForm;","const MyMessage = ({ message }) => {\n    if(message?. attachments?.length > 0) {\n        return (\n            <img src={message.attachments[0].file} alt=\"message-attachment\" className=\"message-image\" style={{ float: 'right'}}/>\n        )\n    }\n    console.log(message)\n    return (\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50'}}>\n         {message.text}\n        </div>\n    );\n};\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message}) => {\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\n    return (\n        <div className=\"message-row\">\n            {isFirstMessageByUser && (\n                <div \n                    className=\"message-avatar\"\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\n                />\n            )}\n            {message?. attachments?.length > 0\n                ? (\n                    <img src={message.attachments[0].file} alt=\"message-attachment\" className=\"message-image\" style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px'}}/>\n                ) : (\n                    <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px'}}>\n                        {message.text}\n                    </div>\n                )\n    }\n        </div> \n    )\n}\nexport default TheirMessage;","import { useState } from 'react';\nimport { sendMessage, isTyping} from 'react-chat-engine';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\nconst MessageForm = (props) => {\n    const [value, setValue] = useState('');\n    const { chatId, creds } = props;\n    const handleSubmit = (event) => {\n         event.preventDefault();\n\n        const text = value.trim();\n\n        if(text.length > 0) sendMessage(creds, chatId, { text });\n\n        setValue('');\n    }\n    const handleChange = (event) => {\n        setValue(event.target.value);\n        isTyping(props, chatId);\n    }\n\n    const handleUpload = (event) => {\n        sendMessage(creds, chatId, { files: event.target.files, text: '' })\n    }\n   \n    return (\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <input \n                className=\"message-input\"\n                placeholder=\"Send a message ...\"\n                value={value}\n                onChange={handleChange}\n                onSubmit={handleSubmit}\n            />\n            <label htmlFor=\"upload-button\">\n                <span className=\"image-button\">\n                    <PictureOutlined className=\"picture-icon\" />\n                </span>\n            </label>\n            <input \n                type=\"file\"\n                multiple={false}\n                id=\"upload-button\"\n                style={{ display: 'none'}}  \n                onChange={handleUpload}\n            />\n            <button type=\"submit\" className=\"send-button\">\n                <SendOutlined className=\"send-icon\" />\n            </button>\n        </form>\n    )\n}\nexport default MessageForm;","import MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\n\nconst ChatFeed = (props) => {\n  const { chats, activeChat, userName, messages } = props;\n\n  const chat = chats && chats[activeChat];\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\n    <div\n      key={`read_${index}`}\n      className=\"read-receipt\"\n      style={{\n        float: isMyMessage ? 'right' : 'left',\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\n      }}\n    />\n  ));\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n\n    return keys.map((key, index) => {\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === message.sender.username;\n\n      return (\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\n          <div className=\"message-block\">\n            {isMyMessage\n              ? <MyMessage message={message} />\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\n          </div>\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\n            {renderReadReceipts(message, isMyMessage)}\n          </div>\n        </div>\n      );\n    });\n  };\n\n  if (!chat) return <div />;\n\n  return (\n    <div className=\"chat-feed\">\n      <div className=\"chat-title-container\">\n        <div className=\"chat-title\">{chat?.title}</div>\n        <div className=\"chat-subtitle\">\n          {chat.people.map((person) => ` ${person.person.username}`)}\n        </div>\n      </div>\n      {renderMessages()}\n      <div style={{ height: '100px' }} />\n      <div className=\"message-form-container\">\n        <MessageForm {...props} chatId={activeChat} />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\nimport LoginForm from './components/LoginForm';\nimport ChatFeed from './components/ChatFeed.jsx';\n\nimport './App.css';\n\nconst App = () => {\n    if(!localStorage.getItem('username')) return <LoginForm />\n\n    return (\n        <ChatEngine \n            height=\"100vh\"\n            projectID=\"1bf81ce9-62ca-4532-a837-de087b3b1926\"\n            userName={localStorage.getItem('username')}\n            userSecret={localStorage.getItem('password')}\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n        />\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}